package com.productcatalog.service;

import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.productcatalog.model.Inventory;
import com.productcatalog.model.Product;
import com.productcatalog.model.ProductDTO;
import com.productcatalog.repository.IProductRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ProductServiceImpl implements IProductService {

	private final IProductRepository productRepository;
	private final ModelMapper mapper;
	// get an instance of RestTemplate
	private final RestTemplate restTemplate;
	// get the url of the inventory service
	private final String BASEURL = "http://product-inventory/http://localhost:8083/inventory-service/v1/inventories";

	@Override
	public void addProduct(ProductDTO productDTO) {
		Product product = mapper.map(productDTO,Product.class);
		productRepository.save(product);
		// get the productId and stock and create an inventory object
		Inventory inventory = new Inventory(product.getProductId(), productDTO.getStock());
		//make an api call to inventory service
		ResponseEntity<String> entity =  restTemplate.postForEntity(BASEURL, inventory,String.class);
		System.out.println(entity.getBody());
	}

	@Override
	public void updateProduct(ProductDTO productDTO) {
		Product product = mapper.map(productDTO, Product.class);
		productRepository.save(product);
	}

	@Override
	public void deleteProduct(int productId) {
		productRepository.deleteById(productId);
	}

	@Override
	public ProductDTO getById(int productId) {
		Optional<Product> optproduct = productRepository.findById(productId);
		if (optproduct.isEmpty())
			return null;
		Product product = optproduct.get();
		ProductDTO productDTO = mapper.map(product, ProductDTO.class);
		return productDTO;

	}

	@Override
	public List<ProductDTO> getAllProducts() {
		List<Product> products = productRepository.findAll();
		return products.stream().map(product -> mapper.map(product, ProductDTO.class)).toList();
	}

	@Override
	public List<ProductDTO> getByCategoryLessPrice(String category, double price) {
		List<Product> products = productRepository.findByCatPrice(category, price);
		return products.stream().map(product -> mapper.map(product, ProductDTO.class)).toList();
	}

	@Override
	public List<ProductDTO> getByBrand(String brand) {
		List<Product> products = productRepository.findByBrand(brand);
		return products.stream().map(product -> mapper.map(product, ProductDTO.class)).toList();
	}

	@Override
	public List<ProductDTO> getByProductNamePrice(String name, double price) {
		List<Product> products = productRepository.findByNamePrice("%" + name + "%", price);
		return products.stream().map(product -> mapper.map(product, ProductDTO.class)).toList();
	}

}
